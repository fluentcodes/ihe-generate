/**
 * Testtreiber ePA-Frontend des Versicherten
 * REST Schnittstelle einer Test-App fuer das ePA-Modul FdV
 *
 * The version of the OpenAPI document: 2.0.4
 * Contact: software-development@gematik.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fluentcodes.ihe.gematik.fdv.api;

import org.fluentcodes.ihe.gematik.fdv.model.RequestDTO;
import org.fluentcodes.ihe.gematik.fdv.model.ResponsePingDTO;
import org.fluentcodes.ihe.gematik.fdv.model.ResponseProductInformationDTO;
import org.fluentcodes.ihe.gematik.fdv.model.UpdateKeysResponseDTO;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Testtreiber ePA-Frontend des Versicherten
 *
 * <p>REST Schnittstelle einer Test-App fuer das ePA-Modul FdV
 *
 * API tests for DefaultApi
 */
public class DefaultApiTest {


    private DefaultApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("https://frontend.titus.ti-dienste.de", DefaultApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Gibt die Informationen zur Produktinformation zurück
     *
     * Die Operation liefert eine Liste mit den Werten der Produktinformation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductInformation1Test() {
        //ResponseProductInformationDTO response = api.getProductInformation1();
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Prüft die Erreichbarkeit der Schnittstelle auf Anwendungsebene
     *
     * Ping prüft die Erreichbarkeit der Schnittstelle auf Anwendungsebene. In der Response wird die Schnittstellenversion zurückgegeben, was der Prüfung der Interoberabilität dient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ping1Test() {
        //ResponsePingDTO response = api.ping1();
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Umschlüsselung durchführen
     *
     * Diese Operation führt den Anwendungsfall \&quot;Umschlüsselung\&quot; in einer mit insurantId identifizierten Aktensession aus. Es werden neue Aktenschlüssel, Kontextschlüssel bzw. Dokumentenschlüssel für den Versicherten, die Berechtigten und die Dokumentenverwaltung erzeugt.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateKeys1Test() {
        RequestDTO requestDTO = null;
        //UpdateKeysResponseDTO response = api.updateKeys1(requestDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
}
