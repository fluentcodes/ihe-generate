/**
 * Testtreiber ePA-Frontend des Versicherten
 * REST Schnittstelle einer Test-App fuer das ePA-Modul FdV
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.fluentcodes.ihe.gematik.fdv.api;

import org.fluentcodes.ihe.gematik.fdv.model.DeletePermissionDTO;
import org.fluentcodes.ihe.gematik.fdv.model.PermissionHcpoDTO;
import org.fluentcodes.ihe.gematik.fdv.model.PermissionInsuranceDTO;
import org.fluentcodes.ihe.gematik.fdv.model.PermissionRepresentativeDTO;
import org.fluentcodes.ihe.gematik.fdv.model.PermissionsResponseDTO;
import org.fluentcodes.ihe.gematik.fdv.model.RequestDTO;
import org.fluentcodes.ihe.gematik.fdv.model.ResponseDTO;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Testtreiber ePA-Frontend des Versicherten
 *
 * <p>REST Schnittstelle einer Test-App fuer das ePA-Modul FdV
 *
 * API tests for PermissionsApi 
 */
public class PermissionsApiTest {


    private PermissionsApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://gematik.de/fdv", PermissionsApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * Berechtigung fuer LEI erteilen
     *
     * Umsetzung Operation I_FdV::grantPermissionHcp (A_18049)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPermissionHcpo1Test() {
        PermissionHcpoDTO permissionHcpoDTO = null;
        //ResponseDTO response = api.addPermissionHcpo1(permissionHcpoDTO);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Berechtigung fuer einen Kostentraeger erteilen
     *
     * Umsetzung Operation I_FdV::grantPermissionInsurance (A_18052)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPermissionInsurance1Test() {
        PermissionInsuranceDTO permissionInsuranceDTO = null;
        //ResponseDTO response = api.addPermissionInsurance1(permissionInsuranceDTO);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Berechtigung fuer einen Vertreter erteilen
     *
     * Umsetzung Operation I_FdV::grantPermissionRepresentative (A_18050)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPermissionRepresentative1Test() {
        PermissionRepresentativeDTO permissionRepresentativeDTO = null;
        //ResponseDTO response = api.addPermissionRepresentative1(permissionRepresentativeDTO);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Berechtigung fuer eine LEI aendern
     *
     * Umsetzung Operation I_FdV::changePermissionHcp (A_18054)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePermissionHcpo1Test() {
        PermissionHcpoDTO permissionHcpoDTO = null;
        //ResponseDTO response = api.changePermissionHcpo1(permissionHcpoDTO);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Berechtigung fuer eine LEI loeschen
     *
     * Umsetzung Operation I_FdV::deletePermissionHcp (A_18055)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePermissionHcpo1Test() {
        DeletePermissionDTO deletePermissionDTO = null;
        //api.deletePermissionHcpo1(deletePermissionDTO);
        
        // TODO: test validations
        
        
    }
    
    /**
     * Berechtigung fuer einen Kostentraeger loeschen
     *
     * Umsetzung Operation I_FdV::deletePermissionInsurance (A_18057)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePermissionInsurance1Test() {
        DeletePermissionDTO deletePermissionDTO = null;
        //api.deletePermissionInsurance1(deletePermissionDTO);
        
        // TODO: test validations
        
        
    }
    
    /**
     * Berechtigung fuer einen Vertreter loeschen
     *
     * Umsetzung Operation I_FdV::deletePermissionRepresentative (A_18056)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePermissionRepresentative1Test() {
        DeletePermissionDTO deletePermissionDTO = null;
        //api.deletePermissionRepresentative1(deletePermissionDTO);
        
        // TODO: test validations
        
        
    }
    
    /**
     * Alle Berechtigungen lesen
     *
     * Umsetzung Operation I_FdV::getPermissions (A_18053)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPermissions1Test() {
        RequestDTO requestDTO = null;
        //PermissionsResponseDTO response = api.getPermissions1(requestDTO);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
