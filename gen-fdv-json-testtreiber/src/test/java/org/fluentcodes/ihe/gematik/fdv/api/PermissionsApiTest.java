/**
 * Testtreiber ePA-Frontend des Versicherten
 * REST Schnittstelle einer Test-App fuer das ePA-Modul FdV
 *
 * The version of the OpenAPI document: 2.0.4
 * Contact: software-development@gematik.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fluentcodes.ihe.gematik.fdv.api;

import org.fluentcodes.ihe.gematik.fdv.model.DeletePermissionDTO;
import org.fluentcodes.ihe.gematik.fdv.model.PermissionHcpoDTO;
import org.fluentcodes.ihe.gematik.fdv.model.PermissionInsuranceDTO;
import org.fluentcodes.ihe.gematik.fdv.model.PermissionRepresentativeDTO;
import org.fluentcodes.ihe.gematik.fdv.model.PermissionsRequestDTO;
import org.fluentcodes.ihe.gematik.fdv.model.PermissionsResponseDTO;
import org.fluentcodes.ihe.gematik.fdv.model.ResponseDTO;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Testtreiber ePA-Frontend des Versicherten
 *
 * <p>REST Schnittstelle einer Test-App fuer das ePA-Modul FdV
 *
 * API tests for PermissionsApi
 */
public class PermissionsApiTest {


    private PermissionsApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("https://frontend.titus.ti-dienste.de", PermissionsApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Anzeige der auf ein Dokument berechtigten LEI
     *
     * Diese Operation führt den Anwendungsfall \&quot;Vergebene Berechtigungen eines Dokuments auflisten\&quot; in einer mit insurantId identifizierten Aktensession aus. Der Nutzer erhält Informationen darüber, welche Leistungserbringerinstitutionen auf das Dokument Zugriff haben.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocAuthorized1Test() {
        PermissionsRequestDTO permissionsRequestDTO = null;
        //PermissionsResponseDTO response = api.getDocAuthorized1(permissionsRequestDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Alle Berechtigungen lesen
     *
     * Diese Operation führt den Anwendungsfall \&quot;Vergebene Berechtigungen auflisten\&quot; in einer mit insurantId identifizierten Aktensession aus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPermissions1Test() {
        //PermissionsResponseDTO response = api.getPermissions1();
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Berechtigung für LEI erteilen
     *
     * Diese Operation führt den Anwendungsfall \&quot;Berechtigung für LEI vergeben\&quot; in einer mit insurantId identifizierten Aktensession aus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void permissionHcpoAddTest() {
        PermissionHcpoDTO permissionHcpoDTO = null;
        //ResponseDTO response = api.permissionHcpoAdd(permissionHcpoDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Berechtigung für eine LEI löschen
     *
     * Diese Operation führt den Anwendungsfall \&quot;Berechtigung für LEI löschen\&quot; in einer mit insurantId identifizierten Aktensession aus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void permissionHcpoRemoveTest() {
        DeletePermissionDTO deletePermissionDTO = null;
        //ResponseDTO response = api.permissionHcpoRemove(deletePermissionDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Berechtigung für eine LEI ändern
     *
     * Diese Operation führt den Anwendungsfall \&quot;Berechtigung für LEI ändern\&quot; in einer mit insurantId identifizierten Aktensession aus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void permissionHcpoUpdateTest() {
        PermissionHcpoDTO permissionHcpoDTO = null;
        //ResponseDTO response = api.permissionHcpoUpdate(permissionHcpoDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Berechtigung für einen Kostenträger erteilen
     *
     * Diese Operation führt den Anwendungsfall \&quot;Berechtigung für Kostenträger vergeben\&quot; in einer mit insurantId identifizierten Aktensession aus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void permissionInsuranceAddTest() {
        PermissionInsuranceDTO permissionInsuranceDTO = null;
        //ResponseDTO response = api.permissionInsuranceAdd(permissionInsuranceDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Berechtigung für einen Kostenträger löschen
     *
     * Diese Operation führt den Anwendungsfall \&quot;Berechtigung für Kostenträger löschen\&quot; in einer mit insurantId identifizierten Aktensession aus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void permissionInsuranceRemoveTest() {
        DeletePermissionDTO deletePermissionDTO = null;
        //ResponseDTO response = api.permissionInsuranceRemove(deletePermissionDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Berechtigung für einen Vertreter erteilen
     *
     * Diese Operation führt den Anwendungsfall \&quot;Vertretung einrichten\&quot; in einer mit insurantId identifizierten Aktensession aus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void permissionRepresentativeAddTest() {
        PermissionRepresentativeDTO permissionRepresentativeDTO = null;
        //ResponseDTO response = api.permissionRepresentativeAdd(permissionRepresentativeDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Berechtigung für einen Vertreter löschen
     *
     * Diese Operation führt den Anwendungsfall \&quot;Berechtigung für Vertreter löschen\&quot; in einer mit insurantId identifizierten Aktensession aus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void permissionRepresentativeRemoveTest() {
        DeletePermissionDTO deletePermissionDTO = null;
        //ResponseDTO response = api.permissionRepresentativeRemove(deletePermissionDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
}
