/**
 * Testtreiber ePA-Frontend des Versicherten
 * REST Schnittstelle einer Test-App fuer das ePA-Modul FdV
 *
 * The version of the OpenAPI document: 2.0.4
 * Contact: software-development@gematik.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fluentcodes.ihe.gematik.fdv.api;

import org.fluentcodes.ihe.gematik.fdv.model.DocumentsRequestDTO;
import org.fluentcodes.ihe.gematik.fdv.model.FindObjectsRequestDTO;
import org.fluentcodes.ihe.gematik.fdv.model.FindObjectsResponseDTO;
import org.fluentcodes.ihe.gematik.fdv.model.ObjectRequestDTO;
import org.fluentcodes.ihe.gematik.fdv.model.ReplaceDocumentRequestDTO;
import org.fluentcodes.ihe.gematik.fdv.model.ResponseDTO;
import org.fluentcodes.ihe.gematik.fdv.model.RetrieveDocumentsResponseDTO;
import org.fluentcodes.ihe.gematik.fdv.model.StoreDocumentRequestDTO;
import org.fluentcodes.ihe.gematik.fdv.model.UpdateMetadataRequestDTO;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Testtreiber ePA-Frontend des Versicherten
 *
 * <p>REST Schnittstelle einer Test-App fuer das ePA-Modul FdV
 *
 * API tests for DocumentsFoldersSubmissionsetsAssociationsApi
 */
public class DocumentsFoldersSubmissionsetsAssociationsApiTest {


    private DocumentsFoldersSubmissionsetsAssociationsApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("https://frontend.titus.ti-dienste.de", DocumentsFoldersSubmissionsetsAssociationsApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Dokumente, Ordner aus dem Aktenkonto löschen
     *
     * Diese Operation führt den Anwendungsfall \&quot;Dokumente löschen\&quot; in einer mit insurantId identifizierten Aktensession aus. löscht die Dokumente, Ordner oder  mit dem im Request angegebenen Ids aus dem Aktenkonto. Die Ids werden mittels findDocuments ermittelt.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteObjects1Test() {
        ObjectRequestDTO objectRequestDTO = null;
        //ResponseDTO response = api.deleteObjects1(objectRequestDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Dokumente, Ordner, Submission Sets und/oder Verknüpfungen in einem Aktenkonto finden
     *
     * Diese Operation führt den Anwendungsfall \&quot;Dokumente / Ordner suchen\&quot; in einer mit insurantId identifizierten Aktensession aus. Die Parameter returnType (Werte sind „LeafClass“ oder „ObjectRef“), startIndex und maxResults werden zum Gruppieren der Ergebnisse für das Blättern verwendet. Die für die Suchoperation zu verwendende Stored Query wird durch den Parameter vorgegeben. Falls dieser nicht angegeben ist, muss eine geeignete Stored Query gewählt werden. Wenn die Suchparameter ein SubmissionSet adressieren, dann soll der Response die Metadaten der im SubmissionSet enthaltenen Dokumente (unter Beachtung ggf. zusätzlich angegebenener Suchkriterien zu Dokumenten) beinhalten. Die Response enthält Metadaten zu Dokumenten aber nicht die Dokumente selbst.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findObjects1Test() {
        FindObjectsRequestDTO findObjectsRequestDTO = null;
        //FindObjectsResponseDTO response = api.findObjects1(findObjectsRequestDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Ersetzen eines Dokuments
     *
     * Diese Operation führt den Anwendungsfall \&quot;Ersetzen eines Dokumentes\&quot; in einer mit insurantId identifizierten Aktensession aus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceDocument1Test() {
        ReplaceDocumentRequestDTO replaceDocumentRequestDTO = null;
        //ResponseDTO response = api.replaceDocument1(replaceDocumentRequestDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Dokumente aus Aktenkonto herunterladen
     *
     * Diese Operation führt den Anwendungsfall \&quot;Dokumente herunterladen\&quot; in einer mit insurantId identifizierten Aktensession aus. Lädt die Dokumente mit den im Request angegebenen Ids aus dem Aktenkonto. Die Ids werden mittels findDocuments ermittelt.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveDocuments1Test() {
        DocumentsRequestDTO documentsRequestDTO = null;
        //RetrieveDocumentsResponseDTO response = api.retrieveDocuments1(documentsRequestDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Dokumente in ein Aktenkonto laden
     *
     * Diese Operation führt den Anwendungsfall \&quot;Dokumente einstellen\&quot; in einer mit insurantId identifizierten Aktensession aus.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storeDocuments1Test() {
        StoreDocumentRequestDTO storeDocumentRequestDTO = null;
        //ResponseDTO response = api.storeDocuments1(storeDocumentRequestDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Aktualisierung der Informationen zu einem Dokument, Ordner des Nutzers oder einer Verknüpfung
     *
     * Diese Operation führt den Anwendungsfall \&quot;Änderung der Vertraulichkeit eines Dokumentes\&quot; in einer mit insurantId identifizierten Aktensession aus. Der Nutzer kann die ConfidentialityCode eines Dokumentes ändern.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMetadata1Test() {
        UpdateMetadataRequestDTO updateMetadataRequestDTO = null;
        //ResponseDTO response = api.updateMetadata1(updateMetadataRequestDTO);
        //assertNotNull(response);
        // TODO: test validations


    }
    
}
